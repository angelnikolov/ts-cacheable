import { ICacheBusterConfig } from './ICacheBusterConfig';
import { ICacheConfig } from './ICacheConfig';
import { ICachePair } from './ICachePair';
import { IStorageStrategy } from './IStorageStrategy';
import { IAsyncStorageStrategy } from './IAsyncStorageStrategy';
import { DOMStorageStrategy } from './DOMStorageStrategy';
import { LocalStorageStrategy } from './LocalStorageStrategy';
import { isInstant, bustCache } from './CacheBusterFunctions';
export declare const DEFAULT_CACHE_RESOLVER: (oldParams: any, newParams: any) => boolean;
export declare const DEFAULT_HASHER: (parameters: Array<any>) => any[];
export declare type ICacheResolver = (oldParameters: any, newParameters: any) => boolean;
export declare type ICacheHasher = (parameters: Array<any>) => any;
export declare type IShouldCacheDecider = (response: any) => boolean;
export declare type ICacheable<T> = (...args: Array<any>) => T;
export { ICacheBusterConfig, ICacheConfig, ICachePair };
export declare const GlobalCacheConfig: {
    maxAge?: number;
    slidingExpiration?: boolean;
    maxCacheCount?: number;
    cacheResolver?: ICacheResolver;
    cacheHasher?: ICacheHasher;
    storageStrategy: new () => IStorageStrategy | IAsyncStorageStrategy;
    globalCacheKey: string;
    promiseImplementation: (() => PromiseConstructorLike) | PromiseConstructorLike;
};
export { IStorageStrategy };
export { IAsyncStorageStrategy };
export { DOMStorageStrategy };
export { LocalStorageStrategy };
export { isInstant, bustCache };
